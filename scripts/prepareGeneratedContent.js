/**
 * Prepare JSON files of content, that are generated by reading JSON files that are created by the
 * CMS. For example, the content of the home page is generated by getting the latest articles.
 */
const dateParse = require('date-fns/parse')
const fse = require('fs-extra')
const globCb = require('glob')
const path = require('path')
const util = require('util')

const glob = util.promisify(globCb)

async function prepareGeneratedContent () {
  try {
    const jsonPaths = getJsonPaths(process.env.NODE_ENV)

    const articlePaths = await glob(`${jsonPaths.articleFolder}/**.json`)
    let articles = []
    for (let articlePath of articlePaths) {
      articles.push({
        ...(await fse.readJson(articlePath)),
        urlPath: getArticleUrl(articlePath)
      })
    }

    await prepareHomePage(articles, jsonPaths.homePage)
    for (let category of ['MIXES', 'MUSINGS', 'PLAYLISTS']) {
      await prepareCategoryPage(category, articles, `${jsonPaths.categoryPrefix}-${category}.json`)
    }
  } catch (err) {
    console.error('FAILED prepareGeneratedContent', err)
  }
}

/** Get the file/folder paths we need, based on our NODE_ENV */
function getJsonPaths (NODE_ENV) {
  const basePath = path.resolve(
    __dirname,
    '..',
    'public',
    (NODE_ENV === 'production') ? 'cms-content' : 'cms-dev-content'
  )

  return {
    articleFolder: `${basePath}/articles`,
    categoryPrefix: `${basePath}/generated/category`,
    homePage: `${basePath}/generated/homePage.json`
  }
}

/** Get the path segment of the URL for an article, based on its JSON filename */
function getArticleUrl (articlePath) {
  const { name } = path.parse(articlePath)
  return `/article/${name}`
}

/** Prepare the content of the home page by getting the latest articles */
async function prepareHomePage (articles, filePath) {
  const latestArticles = articles
    .sort((a, b) => {
      return dateParse(b.publicationDate).getTime() - dateParse(a.publicationDate).getTime()
    })
    .slice(0, 10)

  await fse.outputJson(filePath, { latestArticles })
}

/** Prepare the content of the category pages by getting all articles for that category */
async function prepareCategoryPage (category, articles, filePath) {
  const categoryArticles = articles
    .filter(article => article.category === category)
    .map(({ publicationDate, title, mainImage, summary }) => (
      { publicationDate, title, mainImage, summary } // take only summary properties
    ))

  await fse.outputJson(filePath, { categoryArticles })
}

module.exports = prepareGeneratedContent
if (require.main === module) module.exports()
